import "buildResponse" as buildResponse
import "parseRequest" as parseRequest
import "pathCompare" as pathCompare
import "url" as url

let handle(routes, conn, data) = do
    let request = parseRequest.parse(data)
    request.RemoteAddr = conn.RemoteAddr()
    let response_headers = {}
    let splitURL = url.split(request.path)
    request.path = splitURL.path
    request.query = splitURL.query
    response_headers["Content-Type"] = "text/html; charset=utf-8"
    let OnEnd = []
    let response = {code:200}
    response.onEnd(callback) = do
        OnEnd.append(callback)
    
    response.sendFile(path) = do
        let FILE = file.read(path)
        response_headers["Content-Type"] = FILE.contentType()
        let data = FILE.bytes()
        let response_data = buildResponse.build(response_headers, response.code, "")
        conn.write(response_data)
        conn.writeData(data)
        conn.close()
        for (i from 0 to OnEnd.length) do
            OnEnd[i]()
    
    response.onErr(err) = do
        term.log(err)
        response.code = 500
        response.send("<h1>500 Internal Server Error</h1>")

    response.json(data) = do
        let strdata = json.stringify(data)
        response_headers["Content-Type"] = "application/json"
        response.send(strdata)
    
    response.send(data) = do
        response_headers["Connection"] = "close"
        response_headers["Date"] = time.now().format()
        let response_data = buildResponse.build(response_headers, response.code, data)
        conn.write(response_data)
        conn.close()
        for (i from 0 to OnEnd.length) do
            OnEnd[i]()
    
    let toTry = []
    for (i from 0 to routes.length) do
        let route = routes[i]
        if (route.type == "middleware") do
            toTry.append(route)
        else if (request.method in route.methods) do
            let comparison = pathCompare.compare(route.path, request.path)
            if (comparison.match) do
                route.params = comparison.params
                toTry.append(route)
    let trying = -1
    let next() = do
        trying = trying + 1
        if (trying < toTry.length) do
            let route = toTry[trying]
            response.next = next
            if ("params" in route) do
                request.params = route.params
            else do
                request.params = {}
            try do
                route.callback(request, response)
            catch (err) do
                response.onErr(err)
        else do
            response.code = 404
            response.send("<h1>404 Not Found</h1>")
    next()