import "listener" as listener
import "logger" as logger
import "static" as static
import "cookie" as cookie

let cookie = cookie.cookie
let static = static.static
let logger = logger.logger

let server() = do
    let class = {}
    let threads = []
    let numThreads = 10
    let routes = []
    let Socket = null
    class.setNumberOfThreads(num) = do
        numThreads = num
    class.run(options) = do
        Socket = socket.server("tcp", options.port)
        let onErr(e) = do
            term.error(e.type+": "+e.message)
            term.error(e.code)
            term.error(e.path+" on line "+e.line)
        if ("onErr" in options) do
            onErr = options.onErr
        for (i from 0 to numThreads) do
            t = thread(()=listener.listener(Socket, routes, onErr))
            threads.append(t)
            t.start()
        if ("callback" in options) do
            options.callback(options.port)
        for (i from 0 to threads.length) do
            threads[i].join()
    
    class.close() = Socket.close()
        
    class.route(path, methods, callback) = do
        if (methods == null) do
            methods = ["GET"]
        routes.append({path: path, callback: callback, methods: methods, type: "route"})
    class.use(callback) = do
        routes.append({callback: callback, type: "middleware"})
    return class.object()